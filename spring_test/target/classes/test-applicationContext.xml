<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
- 기본적으로 bean 태그에 들어가는 class는 기본 생성자로 객체를 생성할 수 있어야 된다. Class.forName("").newInstance() 메소드를 사용하여 빈을 생성한다.
- 팩토리 빈 클래스로 정의하면 가능. FactoryBean<T> 인터페이스의 getObject() 메소드를 호출하여 빈을 생성함. 

 -->			
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd        
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">         
        
	<!--
		
		Bean 클래스에 빈의 후 처리기 Annotation을 사용한 설정.
	
		Activates the Spring infrastructure for various annotations to be detected in bean classes: 
		Spring’s @Required and @Autowired, as well as JSR 250’s @PostConstruct, @PreDestroy and @Resource (if available), a
		nd JPA’s @PersistenceContext and @PersistenceUnit (if available).
		 Alternatively, you can choose to activate the individual BeanPostProcessors for those annotations explicitly.	
	   -->
	<!-- 
	   Spring Context Class를 사용할 경우에는 주석처리 가능.
	<context:annotation-config />  -->    
	
	<!--  Bean 클래스에서 트랜잭션 애노테이션을 사용을 위한 설정. -->
	<tx:annotation-driven/>
        
	
	<!--  embeddedDatabase를 Bean Id로 가지는 EmbeddedDatabase(DataSource의 확장) 개체를 등록한다. type를 "HSQL"로 지정하면, HyperSQL 내장형 DB를 사용한다는 뜻이며
		DB 시작과 함께 schema.sql 스크립트가 수행된다.
		
		스프링 컨테이너가 종료될 때, 내장형 DB를 종료하기 위한 shutdown() 메소드가 자동 호출된다.
	 -->
	<jdbc:embedded-database id="embeddedDatabase" type="HSQL">
		<jdbc:script location="classpath:/springbook/learningtest/spring/embeddeddb/schema.sql"></jdbc:script>
	</jdbc:embedded-database>        
        
        
        
	<!-- 테스트를 위한 간단한 DataSource(DB Pool 개념이 없음)임. 실제 운영에 필요한 DataSource는 ComplexDataSource를 사용하면 됨. -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" ></property>
		<property name="url" value="jdbc:sqlserver://localhost:1433;databaseName=springDB" ></property>
		<property name="username" value="spring_user" ></property>
		<property name="password" value="!welcome0" ></property>			
	</bean>
	
	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource"></property>		
		<property name="sqlService" ref="sqlService"></property>
		
		<!--
			sqlService DI를 받는것으로 대체. 
		<property name="sqlMap">
			<map>
				<entry key="add"  value="insert into users(id, name, password, level, login, recommend, email) values(?, ?, ?, ?, ?, ?, ?)"></entry>
				<entry key="get"  value="select * from users where id = ?"></entry>
				<entry key="getAll"  value="select * from users order by id"></entry>
				<entry key="deleteAll"  value="delete from users"></entry>
				<entry key="getCount"  value="select count(*) from users"></entry>
				<entry key="update"  value="update users set name = ?, password = ?, level = ?, login = ?, recommend  = ?, email = ? where id = ?"></entry>
			</map>		
		</property>
		-->
	</bean>	
	
	
	
	<!-- JAXB를 사용하는 Spring OXM
	     org.springframework.oxm.jaxb.Jaxb2Marshaller: Marshaller, Unmarshaller 인터페이스를 모두 구현한 클래스	-->         
	<bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPath" value="springbook.user.sqlservice.jaxb"></property>	
	</bean>        

	
	<!-- OXM을 사용한 SQL Service, 기본값을 사용 -->
	<bean id="sqlService" class="springbook.user.sqlservice.OxmSqlService">
		<property name="unmarshaller" ref="unmarshaller"></property>	
		<!-- 
		ResourceLoader가 처리하는 접두어의 예
		file: 
		   파일시스템의 C:/temp 폴더에 있는 file.txt를 리소스로 만들어 준다.
		   예) file:/C:/temp/file.txt  
		classpath:
		   클래스패스의 루트에 존재하는 file.txt 리소스에 접근하게 해 준다. 클래스 패스 루트부터 절대위치를 적어야 한다.		   
			예) classpath:springbook/dao/sqlmap.xml
				
		http:
			HTTP 프로토콜을 사용해 접근할 수 있는 웹상의 리소스를 지정한다. ftp: 도 사용 가능하다.
			예) http://www.myserver.com/test.dat						
		없음		
			접두어가 없는 경우는 ResourceLoader구현에 따라 리소스 위치가 달라진다. ServletResourceLoader인 경우 서블릿컨텍스트의 루트를 기준으로 해석한다.
			예) WEB-INF/test.dat
		 -->
		<property name="sqlmap" value="classpath:springbook/dao/sqlmap.xml"></property>
		
		<!-- 기본값으로 사용하는 SQL Registry 변경 -->
		<property name="sqlRegistry" ref="sqlRegistry" ></property>
		
	</bean>
	
	<!--  Embedded DB를 사용하는 SQL Registry -->
	<bean id="sqlRegistry" class="springbook.issuetracker.sqlservice.EmbeddedDbSqlRegistry" >
		<property name="dataSource" ref="embeddedDatabase"></property> <!-- jdbc:embedded-database 태그로 생성된  EmbeddedDatabase 객체를 dataSource로 설정함.-->	
	</bean>
	
	<!--  ConcurrentMap 객체를 사용하는 SQL Registry 
	<bean id="sqlRegistry" class="springbook.user.sqlservice.updatable.ConcurrentHashMapSqlRegistry"></bean>
	-->
	
	<!-- <bean id="sqlService" class="springbook.user.sqlservice.DefaultSqlService">  -->
		<!--
			기본값을 사용하지 않을 때 선택적으로도 적용할 수 있음. 
		<property name="sqlRegistry" ref="referenceRegistry"></property>
		 -->
	<!-- </bean>  -->
	
	<!-- 
	<bean id="sqlService" class="springbook.user.sqlservice.BaseSqlService">
		<property name="sqlReader" ref="sqlReader"></property>
		<property name="sqlRegistry" ref="sqlRegistry"></property>		
	</bean>

	
	<bean id="sqlReader" class="springbook.user.sqlservice.JaxbXmlSqlReader">
		<property name="sqlmapFile" value="sqlmap.xml"></property>
	</bean>
	
	<bean id="sqlRegistry" class="springbook.user.sqlservice.HashMapSqlRegistry"></bean>
	 -->
	 
	 	
	<!--
	자기 참조를 사용한 SQL Service 등록 
	<bean id="sqlService" class="springbook.user.sqlservice.XmlSqlService2">
		<property name="sqlmapFile" value="sqlmap.xml"></property>
		<property name="sqlReader" ref="sqlService"></property>  
		<property name="sqlRegistry" ref="sqlService"></property> 
	</bean>
	 -->
	
	
	<!-- 
	
	JAXB를 이용한 서비스 대체
	<bean id="sqlService" class="springbook.user.sqlservice.SimpleSqlService">
		<property name="sqlMap">
			<map>
				<entry key="userAdd"  value="insert into users(id, name, password, level, login, recommend, email) values(?, ?, ?, ?, ?, ?, ?)"></entry>
				<entry key="userGet"  value="select * from users where id = ?"></entry>
				<entry key="userGetAll"  value="select * from users order by id"></entry>
				<entry key="userDeleteAll"  value="delete from users"></entry>
				<entry key="userGetCount"  value="select count(*) from users"></entry>
				<entry key="userUpdate"  value="update users set name = ?, password = ?, level = ?, login = ?, recommend  = ?, email = ? where id = ?"></entry>
			</map>		
		</property>		
	</bean>	
	 -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>		
	</bean>	

	<!-- 실제 발송하기 위한 MailSender는 org.springframework.mail.javamail.JavaMailSenderImpl 클래스임(JavaMail 사용) -->
	<bean id="mailSender" class="springbook.user.service.DummyMailSender">		
	</bean>


	<!--  
		DefaultAdvisorAutoProxyCreator를 사용하여 자동으로 Proxy가 생성되어 대입됨.
	    bean id=transactionPointcut 을 통해 자동으로 Proxy가 생성된다.(클래스명으로 detecting)
	 -->
	<bean id="userService" class="springbook.user.service.UserServiceImpl">
		<qualifier value="no1"/>	
		<property name="userDao" ref="userDao"></property>
		<property name="mailSender" ref="mailSender"></property>		
	</bean>

	<!--  parent 속성을 사용하여 userService bean 설정을 상속받는다. -->
	<bean id="testUserService" class="springbook.user.service.UserServiceImpl$TestUserService" parent="userService"></bean>

	<!-- Spring Proxy Factory Bean을 사용한 userService Proxy 생성. -->
	<!-- 
	<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImpl"></property>
 	-->		
		<!--  advice와 advisor를 동시에 설정할 수 있는 프로퍼티 -->
	<!-- 
		<property name="interceptorNames">
			<list>
 	-->			
				<!--  List에 advice 또는 advisor의 id 값으로 넣어주면 된다. -->
	<!-- 				
				<value>transactionAdvisor</value>
			</list>			
		</property>
	</bean>	
 	-->

	<!-- JDK에서 지원하는 Proxy API를 사용한 트랜잭션 관리. 
	<bean id="userService" class="springbook.user.service.TxProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="target" ref="userSerivceImpl"></property>
		<property name="pattern" value="upgradeLevels"></property>
		<property name="serviceInterface" value="springbook.user.service.UserService"></property>		
	</bean>		
 	-->		
	
	<bean id="userServiceImpl" class="springbook.user.service.UserServiceImpl">
		<qualifier value="no2"/>		
		<property name="userDao" ref="userDao"></property>
		<property name="mailSender" ref="mailSender"></property>	
	</bean>
	

	<!--  transactionManager는 트랜잭션 메니저 Bean id가 transactionManager라면 생략 가능하다. -->
	<!--  get로 시작하는 메소드는 읽기 전용, 나머지 메소드는 트랜잭션 기본값으로 처리. -->
	<tx:advice id="transactionAdvice" >
		<tx:attributes>
			<tx:method name="get*"  read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>


	<!-- tx 네임스페이스를 이용한  transactionAdvice 정의  -->	
	<!--  
		tx:advice 태그를 통해 TransactionInterceptor 빈이 등록된다. propagation이 REQUIRED이면 생략 가능하다. 
	    아래 태그와 비교할 것.
	-->
	<!-- 
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30"  />
			<tx:method name="upgrade*" propagation="REQUIRES_NEW"  isolation="SERIALIZABLE"  />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>		
	</tx:advice>
	 -->
		
	<!-- 
	
	   Spring의 TransactionInterceptor를 사용하여 transactionAdvice 정의 
	
	   PROPAGATION_'NAME': 필수항목이며, 트랜잭선 전파 타입을 결정한다.
	   ISOLATION_'NAME': 격리수준 지정. 생략될 경우 DB의 기본값을 사용한다.
	   readonly: 읽기 전용을 활성화
	   timeout_'NNNN' : 트랜잭션 제한시간 (단위:초)
	   -'Exception1': 체크 예외 중, 롤백 대상을 추가한다.
	   +'Exception2': Runtime 예외지만 롤백시키지 않을 대상을 추가한다. 
	   	   
	   참고: readonly, timeout_ 속성은 최초 트랜잭션이 시작될 경우 적용되며, 트랜잭션 전파 타입에 따라 이어서 참여될 경우 이 속성은 무시된다.
	          여러 메소드에 동시 적용될 경우, 메소드 이름 패턴 중, 가장 정확히 일치하는 것이 적용된다.
	-->
	<!-- 
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED, readOnly, timeout_30</prop> --> <!--  'get' 로 시작하는 모든 메소드에 대한 속성임. --><!-- 				
				<prop key="upgrade*">PROPAGATION_REQUIRES_NEW, ISOLATION_SERIALIZABLE</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>	
	</bean>
	 -->
	
	<!--  트랜잭션을 지원하는 advice 객체(Proxy) 빈 등록 -->
	<!--  AOP에서는 직접 구현한 빈을 제외한 AOP관련 빈들은 의미를 잘 드러내는 독립된 전용 태그를 사용함을 권장 -->
	<!-- 
	<bean id="transactionAdvice" class="springbook.learningtest.jdk.proxy.TransactionAdvice" >
		<property name="transactionManager" ref="transactionManager"></property>
	</bean>
	 -->
	
	<!--  AOP 설정을 담은 부모 태그임. 필요에 따라 AspectJAdvisorAutoProxyCreator를 빈으로 등록해준다. -->
	<aop:config >
	
		<!-- 
			expression을 표현식을 프로퍼티를 가진 AspectJExpressionPointcut을 빈으로 등록해준다. 여러개의 포인트 컷을 등록할 때 사용
			expression은 클래스명(상속 기준)으로 찾으며, 실제 이를 정의할 때는 클래스명 보다는 인터페이스명으로 정의하는 것을 권고함(변경 빈도가 적음)		
		-->
		<aop:pointcut expression="execution(* *..*ServiceImpl.upgrade*(..))"  id="transactionPointcut" />
		
		<!-- advice와 pointcut의 ref를 프로퍼티로 갖는 DefaultBeanFactoryPointcutAdvisor를 등록해준다. pointcut=bean(): 스프링 빈의 id 이름을 기준으로 선정함. -->
		<aop:advisor advice-ref="transactionAdvice"  pointcut="bean(*Service)" />
		
		<!-- <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/> aop:pointcut 태그의 id를 사용하는 경우  -->
				
		<!--  id 로 pointcut과 advice를 하나의 태그로 설정가능. 단 하나의 pointcut을 여러 advisor로 등록하지 못함.  -->
		<!-- <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl.upgrade*(..))"></aop:advisor> -->
		
	</aop:config>	
	
	<!--  AOP 네임스페이스로 대체 -->
	<!-- 
	<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"></property>
	</bean>
	 -->
	
	<!-- 새롭게 만든 클래스 필터 지원 포인트 컷을 빈으로 등록함 -->
	<!-- aspectJ에서 제공하는 Pointcut로 대체 
	<bean id="transactionPointcut" class="springbook.learningtest.jdk.proxy.NameMatchClassMethodPointcut">
		<property name="mappedClassName" value="*ServiceImpl"></property>
		<property name="mappedName" value="upgrade*"></property>
	</bean>
	 -->
	
	<!--  메소드 Name 문자열을 사용한 포인트 컷 빈 설정 -->
	<!-- 
	<bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="upgrade*"></property>
	</bean>
	 -->
	
	<!--  AOP 네임스페이스로 대체 -->
	<!-- 어드바이저(Advisor) 빈 설정 -->
	<!-- 
	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice"></property>
		<property name="pointcut" ref="transactionPointcut"></property>
	</bean>
	 -->
	
	<!--  AOP 네임스페이스로 대체 -->
	<!-- 자동 프록시 생성기: 등록된 빈 중에서 Advisor 인터페이스를 구현한 모든 것을 찾는다. -->
	<!-- 	
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
	 -->

	
</beans>